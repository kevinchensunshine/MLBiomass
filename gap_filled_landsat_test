/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var poi = ee.FeatureCollection("users/kevinlc3/Cover_biomass_19-20");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var points = poi

function format_date(date) {
  var tokens = ee.String(date).split('/')
  var date = ee.Date.fromYMD(ee.Number.parse(tokens.get(2)), ee.Number.parse(tokens.get(1)), ee.Number.parse(tokens.get(0)))
  return date
}

var extract_loc = function(feature) {
  var val = ee.Feature(feature).get('GPS')
  var date = format_date(ee.Feature(feature).get('Date(Date, month, year)'))
  var locs = ee.String(val).split(', ')
  
  var x = ee.Number.parse(locs.get(0));
  var y = ee.Number.parse(locs.get(1));
  return ee.Feature(feature).setGeometry(ee.Geometry.Point(y, x)).set({'system:time_start': ee.Date(date)});
}

var geolocated_points = ee.FeatureCollection(points.map(extract_loc)).select('GPS')
var geometry = geolocated_points.geometry();

var denmark_bound = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017')
            .filter(ee.Filter.eq('country_na', 'Denmark')).geometry();

var startDate_one = ee.Date('2019-09-01')
var endDate_one = ee.Date('2019-12-31')

var GF_Landsat =
    ee.ImageCollection('projects/ee-emma/assets/GF_Landsat_Europe_C2')
    .filterBounds(denmark_bound)
    .filterDate(startDate_one, endDate_one)
    
function clip_images(img) {
  return img.clip(geometry)
}

GF_Landsat = GF_Landsat.map(clip_images)

function addNDVI(img) {
  var ndvi =
      img.normalizedDifference(['B4_mean_post', 'B3_mean_post']).rename('NDVI');
  return img.addBands(ndvi).copyProperties(img, [
    'system:time_start', 'month', 'year', 'DOY'
  ]);
}

var bands = ['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B11', 'B12', 'NDVI'];

filtered_one = GF_Landsat.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
                  .map(maskS2clouds)
                  .map(addNDVI)
var filtered_s2images = filtered_one.select(bands);

//##############################################################
// Step-2: Apply an SGFilter
//##############################################################

// Select the interval. We will have 1 image every n days
var n = 1

var interpolatedCol = gpp_utils.interpolateCollection(filtered_s2images, n, geometry).select(bands)

//##############################################################
// Step-5: Apply Savitzky-Golay filter
//##############################################################

var order = 5
var smoothed = gpp_utils.applySGFilter(interpolatedCol, order)

// Select the d_0_ndvi band and rename it
var d_0_bands = ['d_0_B2',
                  'd_0_B3', 
                  'd_0_B4', 
                  'd_0_B5',
                  'd_0_B6',
                  'd_0_B7',
                  'd_0_B8',
                  'd_0_B8A',
                  'd_0_B11',
                  'd_0_B12', 
                  'd_0_NDVI'];
                  
var smoothed_bands = ['smoothed_B2',
                  'smoothed_B3', 
                  'smoothed_B4', 
                  'smoothed_B5',
                  'smoothed_B6',
                  'smoothed_B7',
                  'smoothed_B8',
                  'smoothed_B8A',
                  'smoothed_B11',
                  'smoothed_B12', 
                  'smoothed_NDVI'];
smoothed = smoothed.select(d_0_bands, smoothed_bands).filterDate('2019-10-14', '2019-11-05')

//##############################################################
// Step-6: Visualize the results + Postprocessing
//##############################################################

print(Chart.image.series(smoothed.select('smoothed_NDVI').filterBounds(geometry), geometry, ee.Reducer.median(), 10)
    .setOptions({
      title: 'NDVI Smoothed',
      lineWidth: 1,
      pointSize: 3,
      maxPixels: 74223793
}));
