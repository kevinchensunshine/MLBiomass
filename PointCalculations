/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var poi = ee.FeatureCollection("users/kevinlc3/Cover_biomass_19-20"),
    s2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var points = poi
function format_date(date) {
  var tokens = ee.String(date).split('/')
  var date = ee.Date.fromYMD(ee.Number.parse(tokens.get(2)), ee.Number.parse(tokens.get(1)), ee.Number.parse(tokens.get(0)))
  return date
}

var extract_loc = function(feature) {
  var val = ee.Feature(feature).get('GPS')
  var date = format_date(ee.Feature(feature).get('Date(Date, month, year)'))
  var locs = ee.String(val).split(', ')
  
  var x = ee.Number.parse(locs.get(0));
  var y = ee.Number.parse(locs.get(1));
  return ee.Feature(feature).setGeometry(ee.Geometry.Point(y, x)).set({'system:time_start': ee.Date(date)});
}

var geolocated_points = ee.FeatureCollection(points.map(extract_loc)).select('GPS')

print(geolocated_points)

var imagecollection_dest_path = 'users/kevinlc3/full_smoothed'
var denmark_bound = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017')
            .filter(ee.Filter.eq('country_na', 'Denmark')).geometry();

var gpp_utils = require('users/kevinlc3/ndvi_nir_collection:Utils/GPP_Processing_Lib');

function maskS2clouds(image) {
  var qa = image.select('QA60');
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
            .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  return image.updateMask(mask).divide(10000)
              .copyProperties(image, ['system:time_start','system:time_end']);
}

function addNDVI(image) {
  // Compute NDVI
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI');
  // Add NIRv as a new band to the image
  return image.addBands(ndvi);
}

function formatDate(feature) {
  return ee.Date(feature.get('system:time_start')).format('YYYY-MM-dd');
}

var root = ee.data.getAssetRoots()[0]['id']
var imagecollectiondownload = function(collection, assetFolder, tileno) {
  var folder = assetFolder
  if (folder !== null && folder !== undefined) {
    var assetFolder = root+'/'+folder+'/'
  } else {
    var assetFolder = root+'/'
  }
    
  var v = collection.size().getInfo()
    
  var colList = collection.toList(v);
  
  for (var i = 0; i < v; i++) {
    var img = ee.Image(colList.get(i));
    var id = 'full_image_tile'+ i.toString() + '_' + tileno.toString();
    var assetId = assetFolder+id
    
    Export.image.toAsset({
      image: img,
      description: id,
      assetId: assetId,
      maxPixels: 1e13,
      scale: 10
    })
  }
}


var startDate_one = ee.Date('2019-09-01')
var endDate_one = ee.Date('2020-12-31')
s2 = s2.filterDate(startDate_one, endDate_one)

var geometry = geolocated_points.geometry().dissolve();

var bands = ['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B11', 'B12', 'NDVI'];

var filtered_one = s2.filterBounds(geometry)

var filtered_one = filtered_one.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
                  .map(maskS2clouds)
                  .map(addNDVI)
var filtered_s2images = filtered_one.select(bands);

//##############################################################
// Step-2: Apply an SGFilter
//##############################################################

// Select the interval. We will have 1 image every n days
var n = 1

var interpolatedCol = gpp_utils.interpolateCollection(filtered_s2images, n, geometry).select(bands)

//##############################################################
// Step-5: Apply Savitzky-Golay filter
//##############################################################

var order = 5
var smoothed = gpp_utils.applySGFilter(interpolatedCol, order)

// Select the d_0_ndvi band and rename it
var d_0_bands = ['d_0_B2',
                  'd_0_B3', 
                  'd_0_B4', 
                  'd_0_B5',
                  'd_0_B6',
                  'd_0_B7',
                  'd_0_B8',
                  'd_0_B8A',
                  'd_0_B11',
                  'd_0_B12', 
                  'd_0_NDVI'];
                  
var smoothed_bands = ['smoothed_B2',
                  'smoothed_B3', 
                  'smoothed_B4', 
                  'smoothed_B5',
                  'smoothed_B6',
                  'smoothed_B7',
                  'smoothed_B8',
                  'smoothed_B8A',
                  'smoothed_B11',
                  'smoothed_B12', 
                  'smoothed_NDVI'];

smoothed = smoothed.select(d_0_bands, smoothed_bands).filterBounds(geometry)

//##############################################################
// Step-6: Visualize the results + Postprocessing
//##############################################################

print(smoothed.first())
imagecollectiondownload(smoothed, 'points_smoothed', 0);

var visualization = {
  min: 0.0,
  max: 0.3,
  bands: ['B4', 'B3', 'B2'],
};

Map.addLayer(
  smoothed.first(), visualization)
